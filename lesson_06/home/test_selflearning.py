#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ —Ñ–∞–π–ª—É _selflearning01.py
–¶–µ–π —Ñ–∞–π–ª –∞–Ω–∞–ª—ñ–∑—É—î —Ç–∞ —Ç–µ—Å—Ç—É—î –†–ï–ê–õ–¨–ù–ò–ô –∫–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞
"""

import sys
import io
import os
import re
from contextlib import redirect_stdout
import unittest
from unittest.mock import patch
from pathlib import Path

class StudentCodeAnalyzer:
    """–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∫–æ–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    
    def __init__(self, file_path="_selflearning01.py"):
        self.dir = Path(__file__).parent
        self.filename = self.dir / file_path
        self.code_content = ""
        self.tasks = {}
        self.load_student_code()

    
    def load_student_code(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(self.filename, 'r', encoding='utf-8') as f:
                self.code_content = f.read()
            self.parse_tasks()
        except FileNotFoundError:
            raise FileNotFoundError(f"–§–∞–π–ª {self.filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç—ñ–π –∂–µ –ø–∞–ø—Ü—ñ.")
        except Exception as e:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
    
    def parse_tasks(self):
        """–ü–∞—Ä—Å–∏—Ç—å –∫–æ–¥ –Ω–∞ –æ–∫—Ä–µ–º—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        lines = self.code_content.split('\n')
        current_task = None
        current_code = []
        
        for line in lines:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–≤–¥–∞–Ω–Ω—è
            if '=== –ó–ê–í–î–ê–ù–ù–Ø' in line:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è
                if current_task and current_code:
                    self.tasks[current_task] = '\n'.join(current_code)
                
                # –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                task_match = re.search(r'–ó–ê–í–î–ê–ù–ù–Ø (\d+)', line)
                if task_match:
                    current_task = int(task_match.group(1))
                    current_code = []
            
            # –î–æ–¥–∞—î–º–æ –∫–æ–¥ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            elif current_task and not line.strip().startswith('print("==='):
                current_code.append(line)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è
        if current_task and current_code:
            self.tasks[current_task] = '\n'.join(current_code)
    
    def get_task_code(self, task_number):
        """–û—Ç—Ä–∏–º—É—î –∫–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        return self.tasks.get(task_number, "")
    
    def has_meaningful_code(self, task_number):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –≤ –∑–∞–≤–¥–∞–Ω–Ω—ñ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–π –∫–æ–¥"""
        code = self.get_task_code(task_number)
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
        meaningful_lines = []
        for line in code.split('\n'):
            stripped = line.strip()
            if stripped and not stripped.startswith('#') and not stripped.startswith('# –í–∞—à –∫–æ–¥ —Ç—É—Ç'):
                meaningful_lines.append(stripped)
        
        return len(meaningful_lines) > 0
    
    def execute_task_code(self, task_number, inputs=None):
        """–í–∏–∫–æ–Ω—É—î –∫–æ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –≤—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        code = self.get_task_code(task_number)
        if not code.strip():
            return None, "–ö–æ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π"
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
            output = io.StringIO()
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            if inputs:
                with patch('builtins.input', side_effect=inputs):
                    with redirect_stdout(output):
                        exec(code)
            else:
                with redirect_stdout(output):
                    exec(code)
            
            return output.getvalue(), None
            
        except Exception as e:
            return None, f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {str(e)}"


class TestStudentCode(unittest.TestCase):
    """–¢–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    
    @classmethod
    def setUpClass(cls):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –∫–æ–¥—É"""
        try:
            cls.analyzer = StudentCodeAnalyzer()
        except Exception as e:
            cls.analyzer = None
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
    
    def setUp(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞"""
        if not self.analyzer:
            self.skipTest("–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∫–æ–¥—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def test_task_1_age_classification(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–∫—É"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–∫—É")
        
        if not self.analyzer.has_meaningful_code(1):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 1 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        test_cases = [
            (['5'], "–î–∏—Ç–∏–Ω–∞"),
            (['11'], "–î–∏—Ç–∏–Ω–∞"),
            (['12'], "–ü—ñ–¥–ª—ñ—Ç–æ–∫"),
            (['15'], "–ü—ñ–¥–ª—ñ—Ç–æ–∫"),
            (['17'], "–ü—ñ–¥–ª—ñ—Ç–æ–∫"),
            (['18'], "–î–æ—Ä–æ—Å–ª–∏–π"),
            (['25'], "–î–æ—Ä–æ—Å–ª–∏–π")
        ]
        
        for inputs, expected in test_cases[:3]:  # –¢–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 3 –≤–∏–ø–∞–¥–∫–∏
            with self.subTest(age=inputs[0]):
                output, error = self.analyzer.execute_task_code(1, inputs)
                
                if error:
                    self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 1: {error}")
                
                if expected.lower() not in output.lower():
                    self.fail(f"–î–ª—è –≤—ñ–∫—É {inputs[0]} –æ—á—ñ–∫—É—î—Ç—å—Å—è '{expected}', –∞–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 1 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_2_even_odd(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 2: –ü–∞—Ä–Ω–µ —á–∏ –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 2: –ü–∞—Ä–Ω–µ —á–∏ –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ")
        
        if not self.analyzer.has_meaningful_code(2):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 2 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        test_cases = [
            (['4'], "–ø–∞—Ä–Ω–µ"),
            (['7'], "–Ω–µ–ø–∞—Ä–Ω–µ"),
            (['0'], "–ø–∞—Ä–Ω–µ")
        ]
        
        for inputs, expected in test_cases:
            with self.subTest(number=inputs[0]):
                output, error = self.analyzer.execute_task_code(2, inputs)
                
                if error:
                    self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 2: {error}")
                
                if expected.lower() not in output.lower():
                    self.fail(f"–î–ª—è —á–∏—Å–ª–∞ {inputs[0]} –æ—á—ñ–∫—É—î—Ç—å—Å—è '{expected}', –∞–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 2 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_3_grade_calculator(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 3: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ü—ñ–Ω–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 3: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ü—ñ–Ω–æ–∫")
        
        if not self.analyzer.has_meaningful_code(3):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 3 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        test_cases = [
            (['95'], "–≤—ñ–¥–º—ñ–Ω–Ω–æ"),
            (['85'], "–¥–æ–±—Ä–µ"),
            (['75'], "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"),
            (['65'], "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"),
            (['55'], "–ø–æ–≥–∞–Ω–æ")
        ]
        
        for inputs, expected in test_cases[:3]:
            with self.subTest(score=inputs[0]):
                output, error = self.analyzer.execute_task_code(3, inputs)
                
                if error:
                    self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 3: {error}")
                
                if expected.lower() not in output.lower():
                    self.fail(f"–î–ª—è –±–∞–ª—ñ–≤ {inputs[0]} –æ—á—ñ–∫—É—î—Ç—å—Å—è '{expected}', –∞–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 3 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_4_multiplication_table(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 4: –¢–∞–±–ª–∏—Ü—è –º–Ω–æ–∂–µ–Ω–Ω—è"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 4: –¢–∞–±–ª–∏—Ü—è –º–Ω–æ–∂–µ–Ω–Ω—è")
        
        if not self.analyzer.has_meaningful_code(4):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 4 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        output, error = self.analyzer.execute_task_code(4)
        
        if error:
            self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 4: {error}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–Ω–æ–∂–µ–Ω–Ω—è
        required_results = ["5", "10", "15", "25", "50"]
        found_results = 0
        
        for result in required_results:
            if result in output:
                found_results += 1
        
        if found_results < 3:
            self.fail(f"–¢–∞–±–ª–∏—Ü—è –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–µ–ø–æ–≤–Ω–∞. –û—á—ñ–∫—É—é—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–Ω–æ–∂–µ–Ω–Ω—è 5 –Ω–∞ —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 10. –û—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 4 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_5_sum_calculation(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 5: –°—É–º–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 50"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 5: –°—É–º–∞ —á–∏—Å–µ–ª")
        
        if not self.analyzer.has_meaningful_code(5):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 5 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        output, error = self.analyzer.execute_task_code(5)
        
        if error:
            self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 5: {error}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å—É–º–∏ (1275)
        if "1275" not in output:
            self.fail(f"–°—É–º–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 50 –º–∞—î –±—É—Ç–∏ 1275. –û—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 5 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_6_digit_count(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 6: –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ü–∏—Ñ—Ä"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 6: –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ü–∏—Ñ—Ä")
        
        if not self.analyzer.has_meaningful_code(6):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 6 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        test_cases = [
            (['123'], "3"),
            (['1'], "1"),
            (['9999'], "4")
        ]
        
        for inputs, expected in test_cases[:2]:
            with self.subTest(number=inputs[0]):
                output, error = self.analyzer.execute_task_code(6, inputs)
                
                if error:
                    self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 6: {error}")
                
                if expected not in output:
                    self.fail(f"–î–ª—è —á–∏—Å–ª–∞ {inputs[0]} –æ—á—ñ–∫—É—î—Ç—å—Å—è {expected} —Ü–∏—Ñ—Ä. –û—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 6 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_7_string_output(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 7: –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ —Ä—è–¥–∫–∞"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 7: –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤")
        
        if not self.analyzer.has_meaningful_code(7):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 7 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        test_input = "Test"
        output, error = self.analyzer.execute_task_code(7, [test_input])
        
        if error:
            self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 7: {error}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å–∏–º–≤–æ–ª–∏ –≤ –æ–∫—Ä–µ–º–∏—Ö —Ä—è–¥–∫–∞—Ö
        lines = output.strip().split('\n')
        if len(lines) < len(test_input):
            self.fail(f"–ö–æ–∂–µ–Ω —Å–∏–º–≤–æ–ª –º–∞—î –±—É—Ç–∏ –Ω–∞ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É. –û—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 7 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    def test_task_12_star_pyramid(self):
        """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 12: –ü—ñ—Ä–∞–º—ñ–¥–∞ –∑—ñ—Ä–æ—á–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 12: –ü—ñ—Ä–∞–º—ñ–¥–∞ –∑—ñ—Ä–æ—á–æ–∫")
        
        if not self.analyzer.has_meaningful_code(12):
            self.fail("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è 12 –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ! –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è '# –í–∞—à –∫–æ–¥ —Ç—É—Ç:'")
        
        output, error = self.analyzer.execute_task_code(12)
        
        if error:
            self.fail(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 12: {error}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑—ñ—Ä–æ—á–æ–∫ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        lines = [line.strip() for line in output.strip().split('\n') if line.strip()]
        
        expected_patterns = ["*", "**", "***", "****", "*****"]
        found_patterns = 0
        
        for pattern in expected_patterns:
            if any(pattern in line for line in lines):
                found_patterns += 1
        
        if found_patterns < 3:
            self.fail(f"–ü—ñ—Ä–∞–º—ñ–¥–∞ –∑—ñ—Ä–æ—á–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞. –û—á—ñ–∫—É—é—Ç—å—Å—è —Ä—è–¥–∫–∏: *, **, ***, ****, *****. –û—Ç—Ä–∏–º–∞–Ω–æ: '{output.strip()}'")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 12 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


def check_file_exists():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏"""
    return True


def run_specific_test(task_number):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
    if not check_file_exists():
        return
    
    suite = unittest.TestSuite()
    
    test_methods = {
        1: 'test_task_1_age_classification',
        2: 'test_task_2_even_odd',
        3: 'test_task_3_grade_calculator',
        4: 'test_task_4_multiplication_table',
        5: 'test_task_5_sum_calculation',
        6: 'test_task_6_digit_count',
        7: 'test_task_7_string_output',
        12: 'test_task_12_star_pyramid'
    }
    
    if task_number in test_methods:
        suite.addTest(TestStudentCode(test_methods[task_number]))
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite)
        
        if result.wasSuccessful():
            print(f"\nüéâ –ó–∞–≤–¥–∞–Ω–Ω—è {task_number} –≤–∏–∫–æ–Ω–∞–Ω–æ –ü–†–ê–í–ò–õ–¨–ù–û!")
        else:
            print(f"\n‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è {task_number} –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è")
    else:
        print(f"‚ùå –¢–µ—Å—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_number} –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤"""
    if not check_file_exists():
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤–∞—à–æ–≥–æ –∫–æ–¥—É...")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–µ—Å—Ç–∏
    available_tests = [1, 2, 3, 4, 5, 6, 7, 12]
    
    for task_num in available_tests:
        print(f"\n{'='*20} –ó–ê–í–î–ê–ù–ù–Ø {task_num} {'='*20}")
        run_specific_test(task_num)
    
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö:")
    print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∑ –∑–µ–ª–µ–Ω–∏–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –∑ —á–µ—Ä–≤–æ–Ω–∏–º–∏ —Ö—Ä–µ—Å—Ç–∏–∫–∞–º–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è")
    print("üí° –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç–∏ –∑–Ω–æ–≤—É")


if __name__ == "__main__":
    print("üéØ –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–î–£ –°–¢–£–î–ï–ù–¢–ê")
    print("=" * 50)
    
    if not check_file_exists():
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)
    
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:")
    print("1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("3. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª—É")
    
    try:
        choice = input("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó (1-3): ").strip()
        
        if choice == "1":
            run_all_tests()
        elif choice == "2":
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: 1, 2, 3, 4, 5, 6, 7, 12")
            task_num = int(input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è: "))
            run_specific_test(task_num)
        elif choice == "3":
            analyzer = StudentCodeAnalyzer()
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–£ '{analyzer.filename}':")
            print("-" * 40)
            total_tasks = len(analyzer.tasks)
            completed_tasks = sum(1 for i in analyzer.tasks if analyzer.has_meaningful_code(i))
            print(f"–í—Å—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω—å –∑–Ω–∞–π–¥–µ–Ω–æ: {total_tasks}")
            print(f"–ó–∞–≤–¥–∞–Ω—å –∑ –∫–æ–¥–æ–º: {completed_tasks}")
            print(f"–ó–∞–≤–¥–∞–Ω—å –±–µ–∑ –∫–æ–¥—É: {total_tasks - completed_tasks}")
            
            print("\n–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
            for task_num in sorted(analyzer.tasks.keys()):
                status = "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ" if analyzer.has_meaningful_code(task_num) else "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏"
                print(f"  –ó–∞–≤–¥–∞–Ω–Ω—è {task_num}: {status}")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
            
    except (ValueError, KeyboardInterrupt):
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
    print("\nüéì –£—Å–ø—ñ—Ö—ñ–≤ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ Python!")