#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∑ Git —Ç–∞ GitHub - True/False
–ê–≤—Ç–æ—Ä: Assistant
–î–∞—Ç–∞: 2025
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Tuple

class GitTest:
    def __init__(self):
        self.questions = [
            {
                "id": 1,
                "statement": "Git - —Ü–µ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Ä—Å—ñ–π",
                "answer": False,
                "explanation": "Git - —Ü–µ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Ä—Å—ñ–π. –ö–æ–∂–Ω–∞ —Ä–æ–±–æ—á–∞ –∫–æ–ø—ñ—è –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É."
            },
            {
                "id": 2,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git init' —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó",
                "answer": True,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git init' —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –Ω–æ–≤–∏–π Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É –ø–æ—Ç–æ—á–Ω—ñ–π –ø–∞–ø—Ü—ñ, —Å—Ç–≤–æ—Ä—é—é—á–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é .git."
            },
            {
                "id": 3,
                "statement": "–§–∞–π–ª–∏ —É Git –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –¥–≤–æ—Ö —Å—Ç–∞–Ω–∞—Ö: Modified —Ç–∞ Committed",
                "answer": False,
                "explanation": "–£ Git —Ñ–∞–π–ª–∏ –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –≤ —Ç—Ä—å–æ—Ö —Å—Ç–∞–Ω–∞—Ö: Modified (–∑–º—ñ–Ω–µ–Ω–∏–π), Staged (–ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π) —Ç–∞ Committed (–∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π)."
            },
            {
                "id": 4,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git add' –ø–µ—Ä–µ–º—ñ—â—É—î —Ñ–∞–π–ª–∏ –∑ Working Directory –¥–æ Staging Area",
                "answer": True,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git add' –¥–æ–¥–∞—î —Ñ–∞–π–ª–∏ –¥–æ Staging Area (–æ–±–ª–∞—Å—Ç—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏), –≥–æ—Ç—É—é—á–∏ —ó—Ö –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–º—ñ—Ç—É."
            },
            {
                "id": 5,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git pull' –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—é 'git fetch' —Ç–∞ 'git merge'",
                "answer": True,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git pull' –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–∏ –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±'—î–¥–Ω—É—î —ó—Ö –∑ –ø–æ—Ç–æ—á–Ω–æ—é –≥—ñ–ª–∫–æ—é."
            },
            {
                "id": 6,
                "statement": "Fork –Ω–∞ GitHub - —Ü–µ –∫–æ–ø—ñ—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —É –≤–∞—à–æ–º—É –≤–ª–∞—Å–Ω–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ",
                "answer": True,
                "explanation": "Fork —Å—Ç–≤–æ—Ä—é—î –∫–æ–ø—ñ—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —É –≤–∞—à–æ–º—É GitHub –∞–∫–∞—É–Ω—Ç—ñ, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –≤–∞–º –≤–Ω–æ—Å–∏—Ç–∏ –∑–º—ñ–Ω–∏ –±–µ–∑ –≤–ø–ª–∏–≤—É –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª."
            },
            {
                "id": 7,
                "statement": "Pull Request –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Ñ–æ—Ä–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —ñ –±—ñ–ª—å—à–µ –Ω—ñ—è–∫",
                "answer": False,
                "explanation": "Pull Request –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —è–∫ –∑ —Ñ–æ—Ä–∫—É, —Ç–∞–∫ —ñ –∑ –≥—ñ–ª–∫–∏ –≤ —Ç–æ–º—É –∂ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó (—è–∫—â–æ —É –≤–∞—Å —î –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É)."
            },
            {
                "id": 8,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git reset --hard HEAD~1' –±–µ–∑–ø–æ–≤–æ—Ä–æ—Ç–Ω–æ –≤–∏–¥–∞–ª—è—î –≤—Å—ñ –∑–º—ñ–Ω–∏ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–º—ñ—Ç—É",
                "answer": True,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git reset --hard HEAD~1' –≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–º—ñ—Ç —Ç–∞ –≤—Å—ñ –∑–º—ñ–Ω–∏ –≤ —Ä–æ–±–æ—á—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó. –¶–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è."
            },
            {
                "id": 9,
                "statement": "–õ–∏—à–µ –≥—ñ–ª–∫–∞ 'main' –∞–±–æ 'master' –º–∞—î –∑–∞–≤–∂–¥–∏ –º—ñ—Å—Ç–∏—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π, –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–ø—É—Å–∫—É –∫–æ–¥",
                "answer": False,
                "explanation": "–•–æ—á–∞ —Ü–µ —Ö–æ—Ä–æ—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞, —Ü–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏. –ù–µ –≤—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏ –¥–æ—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ü—å–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞."
            },
            {
                "id": 10,
                "statement": "–ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –∑–ª–∏—Ç—Ç—è –≤–∏–Ω–∏–∫–∞—é—Ç—å —Ç–æ–¥—ñ —ñ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –¥–≤–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –∑–º—ñ–Ω—é—é—Ç—å –æ–¥–∏–Ω —ñ —Ç–æ–π –∂–µ —Ñ–∞–π–ª",
                "answer": False,
                "explanation": "–ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –º–æ–∂—É—Ç—å –≤–∏–Ω–∏–∫–∞—Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É, –∞ –π –ø—Ä–∏ —Ä—ñ–∑–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ—è—Ö –∑ —Ñ–∞–π–ª–∞–º–∏ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç–æ—â–æ)."
            },
            {
                "id": 11,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git commit --amend' –∫—Ä—ñ–º —Ç–æ–≥–æ –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–º—ñ—Ç—É",
                "answer": True,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git commit --amend' –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–º—ñ—Ç—É."
            },
            {
                "id": 12,
                "statement": "SHA-1 —Ö–µ—à –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º—ñ—Ç—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –≤ –º–µ–∂–∞—Ö –≤—Å—ñ—Ö Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤ —Å–≤—ñ—Ç—É",
                "answer": True,
                "explanation": "SHA-1 —Ö–µ—à –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º—ñ—Ç—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∑–∞–≤–¥—è–∫–∏ –≤–∫–ª—é—á–µ–Ω–Ω—é timestamp, –∞–≤—Ç–æ—Ä–∞, –∑–º—ñ—Å—Ç—É —Ç–∞ —Ö–µ—à—É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–æ–º—ñ—Ç—É."
            },
            {
                "id": 13,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git clone' –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–µ—Ä—Å—ñ—é —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É",
                "answer": False,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git clone' –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –∑ —É—Å—ñ–º–∞ –∫–æ–º—ñ—Ç–∞–º–∏, –≥—ñ–ª–∫–∞–º–∏ —Ç–∞ —Ç–µ–≥–∞–º–∏."
            },
            {
                "id": 14,
                "statement": "–£ Git –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≥—ñ–ª–∫–∏ –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ",
                "answer": True,
                "explanation": "Git –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—ñ–ª–æ–∫, —ñ —Ü–µ –æ–¥–Ω–∞ –∑ –π–æ–≥–æ –ø–µ—Ä–µ–≤–∞–≥ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏."
            },
            {
                "id": 15,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git revert' –≤–∏–¥–∞–ª—è—î –∫–æ–º—ñ—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó",
                "answer": False,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git revert' —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∫–æ–º—ñ—Ç, —è–∫–∏–π —Å–∫–∞—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–º—ñ—Ç—É, –Ω–µ –≤–∏–¥–∞–ª—è—é—á–∏ –π–æ–≥–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó."
            },
            {
                "id": 16,
                "statement": "GitHub Actions –¥–æ–∑–≤–æ–ª—è—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Ä–æ–∑—Ä–æ–±–∫–∏",
                "answer": True,
                "explanation": "GitHub Actions - —Ü–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ CI/CD, —â–æ –¥–æ–∑–≤–æ–ª—è—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –∑–±—ñ—Ä–∫—É —Ç–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∫–æ–¥—É."
            },
            {
                "id": 17,
                "statement": "–§–∞–π–ª .gitignore –≤–∞—Ä—Ç–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é",
                "answer": True,
                "explanation": "–§–∞–π–ª .gitignore –≤–∞—Ä—Ç–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é, —â–æ–± –≤—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤."
            },
            {
                "id": 18,
                "statement": "–ö–æ–º–∞–Ω–¥–∞ 'git stash' —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î –Ω–µ–∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–∏",
                "answer": True,
                "explanation": "–ö–æ–º–∞–Ω–¥–∞ 'git stash' –∑–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –∑–º—ñ–Ω–∏ –≤ —Å—Ç–µ–∫—É, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—É –≥—ñ–ª–∫—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –ø—ñ–∑–Ω—ñ—à–µ."
            },
            {
                "id": 19,
                "statement": "Merge –∫–æ–º—ñ—Ç –∑–∞–≤–∂–¥–∏ –º–∞—î –¥–≤–æ—Ö –±–∞—Ç—å–∫—ñ–≤",
                "answer": True,
                "explanation": "Merge –∫–æ–º—ñ—Ç –æ–±'—î–¥–Ω—É—î –¥–≤—ñ –≥—ñ–ª–∫–∏, —Ç–æ–º—É –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –º–∞—î –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –¥–≤–æ—Ö –±–∞—Ç—å–∫—ñ–≤ - –ø–æ –æ–¥–Ω–æ–º—É –∑ –∫–æ–∂–Ω–æ—ó –≥—ñ–ª–∫–∏."
            },
            {
                "id": 20,
                "statement": "GitHub Desktop - —Ü–µ —î–¥–∏–Ω–∏–π GUI –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Git",
                "answer": False,
                "explanation": "GitHub Desktop - —Ü–µ –æ–¥–∏–Ω –∑ GUI –∫–ª—ñ—î–Ω—Ç—ñ–≤. –Ü—Å–Ω—É—î –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö: GitKraken, SourceTree, TortoiseGit —Ç–∞ —ñ–Ω—à—ñ."
            }
        ]
        
        self.user_answers = {}
        self.test_started = False
        self.test_completed = False
    
    def display_header(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç—É"""
        print("=" * 80)
        print("üéØ –¢–ï–°–¢ –ó GIT –¢–ê GITHUB - TRUE/FALSE")
        print("=" * 80)
        print(f"üìö –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å: {len(self.questions)}")
        print("üí° –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ True –∞–±–æ False (T/F, 1/0, –¢–∞–∫/–ù—ñ)")
        print("üîÑ –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º")
        print("-" * 80)
    
    def get_user_input(self, prompt: str) -> str:
        """–û—Ç—Ä–∏–º—É—î –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é"""
        while True:
            try:
                user_input = input(prompt).strip()
                if user_input:
                    return user_input
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å!")
            except KeyboardInterrupt:
                print("\n\nüëã –¢–µ—Å—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                exit(0)
    
    def parse_answer(self, answer: str) -> bool:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å—Ç—Ä–æ–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ boolean"""
        answer = answer.lower().strip()
        
        true_answers = ['true', 't', '1', '—Ç–∞–∫', '–¥–∞', 'yes', 'y']
        false_answers = ['false', 'f', '0', '–Ω—ñ', '–Ω–µ—Ç', 'no', 'n']
        
        if answer in true_answers:
            return True
        elif answer in false_answers:
            return False
        else:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
    
    def ask_question(self, question: Dict) -> None:
        """–ó–∞–¥–∞—î –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        print(f"\nüìù –ü–∏—Ç–∞–Ω–Ω—è {question['id']}/{len(self.questions)}:")
        print(f"   {question['statement']}")
        print()
        
        while True:
            try:
                answer_str = self.get_user_input("–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (True/False): ")
                answer = self.parse_answer(answer_str)
                self.user_answers[question['id']] = answer
                break
            except ValueError:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å 'True' –∞–±–æ 'False' (–º–æ–∂–Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–æ: T/F, 1/0, –¢–∞–∫/–ù—ñ)")
    
    def review_answers(self) -> bool:
        """–î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        print("\n" + "=" * 80)
        print("üìã –ü–ï–†–ï–ì–õ–Ø–î –í–Ü–î–ü–û–í–Ü–î–ï–ô")
        print("=" * 80)
        
        for question in self.questions:
            q_id = question['id']
            user_answer = self.user_answers.get(q_id, "–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            
            if isinstance(user_answer, bool):
                answer_text = "True" if user_answer else "False"
            else:
                answer_text = str(user_answer)
            
            print(f"{q_id:2d}. {question['statement']}")
            print(f"    –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {answer_text}")
            print()
        
        
        while True:
            choice = self.get_user_input(
                "\n–í–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —è–∫—É—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å? (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ '–∑–∞–≤–µ—Ä—à–∏—Ç–∏'/0): "
            ).lower()
            
            if choice in ['–∑–∞–≤–µ—Ä—à–∏—Ç–∏', 'finish', 'done', 'end', '–≥–æ—Ç–æ–≤–æ', '–≤—Å–µ' '0']:
                return True
            
            try:
                q_num = int(choice)
                if 1 <= q_num <= len(self.questions):
                    question = next(q for q in self.questions if q['id'] == q_num)
                    print(f"\nüìù –ü–∏—Ç–∞–Ω–Ω—è {q_num}: {question['statement']}")
                    
                    while True:
                        try:
                            new_answer_str = self.get_user_input("–ù–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (True/False): ")
                            new_answer = self.parse_answer(new_answer_str)
                            self.user_answers[q_num] = new_answer
                            print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è {q_num} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {'True' if new_answer else 'False'}")
                            break
                        except ValueError:
                            print("‚ùå –í–≤–µ–¥—ñ—Ç—å 'True' –∞–±–æ 'False'")
                else:
                    print(f"‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥ 1 –¥–æ {len(self.questions)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ '–∑–∞–≤–µ—Ä—à–∏—Ç–∏'")
    
    def calculate_results(self) -> Tuple[int, int, List[Dict]]:
        """–û–±—á–∏—Å–ª—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É"""
        correct = 0
        total = len(self.questions)
        detailed_results = []
        
        for question in self.questions:
            q_id = question['id']
            user_answer = self.user_answers.get(q_id)
            correct_answer = question['answer']
            is_correct = user_answer == correct_answer
            
            if is_correct:
                correct += 1
            
            detailed_results.append({
                'question': question,
                'user_answer': user_answer,
                'is_correct': is_correct
            })
        
        return correct, total, detailed_results
    
    def get_grade_info(self, percentage: float) -> Tuple[str, str]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Ü—ñ–Ω–∫—É —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        if percentage >= 90:
            return "‚≠ê –í–Ü–î–ú–Ü–ù–ù–û", "–í–∏ —á—É–¥–æ–≤–æ –∑–Ω–∞—î—Ç–µ Git —Ç–∞ GitHub! üéâ"
        elif percentage >= 80:
            return "üåü –î–£–ñ–ï –î–û–ë–†–ï", "–£ –≤–∞—Å —Å–æ–ª—ñ–¥–Ω—ñ –∑–Ω–∞–Ω–Ω—è Git —Ç–∞ GitHub! üëè"
        elif percentage >= 70:
            return "üëç –î–û–ë–†–ï", "–Ñ –¥–µ—è–∫—ñ –ø—Ä–æ–≥–∞–ª–∏–Ω–∏, –∞–ª–µ –∑–∞–≥–∞–ª–æ–º –Ω–µ–ø–æ–≥–∞–Ω–æ! üí™"
        elif percentage >= 60:
            return "üìö –ó–ê–î–û–í–Ü–õ–¨–ù–û", "–í–∞—Ä—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª."
        else:
            return "üìñ –ü–û–¢–†–Ü–ë–ù–ê –ü–†–ê–ö–¢–ò–ö–ê", "–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –≤–∏–≤—á–∞—Ç–∏ Git —Ç–∞ GitHub."
    
    def display_results(self) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É"""
        correct, total, detailed_results = self.calculate_results()
        percentage = (correct / total) * 100
        grade, comment = self.get_grade_info(percentage)
        
        print("\n" + "=" * 80)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£")
        print("=" * 80)
        print(f"üìä –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct} –∑ {total}")
        print(f"üìà –í—ñ–¥—Å–æ—Ç–æ–∫: {percentage:.1f}%")
        print(f"üèÜ –û—Ü—ñ–Ω–∫–∞: {grade}")
        print(f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}")
        print("=" * 80)
        
        # –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–ò–ô –†–û–ó–ë–Ü–†:")
        print("-" * 80)
        
        for i, result in enumerate(detailed_results, 1):
            question = result['question']
            user_answer = result['user_answer']
            is_correct = result['is_correct']
            
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û" if is_correct else "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û"
            user_text = "True" if user_answer else "False" if user_answer is not None else "–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
            correct_text = "True" if question['answer'] else "False"
            
            print(f"\n{i:2d}. {question['statement']}")
            print(f"    {status}")
            print(f"    –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {user_text}")
            print(f"    –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_text}")
            print(f"    üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {question['explanation']}")
    
    def save_results(self) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É —É —Ñ–∞–π–ª"""
        try:
            correct, total, detailed_results = self.calculate_results()
            percentage = (correct / total) * 100
            grade, comment = self.get_grade_info(percentage)
            
            results_data = {
                'timestamp': datetime.now().isoformat(),
                'score': {
                    'correct': correct,
                    'total': total,
                    'percentage': percentage,
                    'grade': grade,
                    'comment': comment
                },
                'questions': []
            }
            
            for result in detailed_results:
                question = result['question']
                results_data['questions'].append({
                    'id': question['id'],
                    'statement': question['statement'],
                    'correct_answer': question['answer'],
                    'user_answer': result['user_answer'],
                    'is_correct': result['is_correct'],
                    'explanation': question['explanation']
                })
            
            filename = f"git_test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")
    
    def run_test(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É"""
        self.display_header()
        
        # –ó–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ—Ç–æ–≤–∏–π
        ready = self.get_user_input("–ì–æ—Ç–æ–≤—ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç? (–¢–∞–∫/–ù—ñ): ")
        if not self.parse_answer(ready):
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å, –∫–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ.")
            return
        
        self.test_started = True
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ç–µ—Å—Ç—É
        print("\nüöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç!")
        
        for question in self.questions:
            self.ask_question(question)
        
        # –ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        print("\n‚úÖ –í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ!")
        self.review_answers()
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        confirm = self.get_user_input("\n–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç —ñ –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏? (–¢–∞–∫/–ù—ñ): ")
        if not self.parse_answer(confirm):
            print("–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
            return
        
        self.test_completed = True
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.display_results()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        save_choice = self.get_user_input("\n–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–∞–π–ª? (–¢–∞–∫/–ù—ñ): ")
        if self.parse_answer(save_choice):
            self.save_results()
        
        print("\nüéâ –î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –∑ Git —Ç–∞ GitHub!")
        print("üìö –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤–∏–≤—á–∞—Ç–∏ —Ç–∞ –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏—Å—è!")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É...")
    
    try:
        test = GitTest()
        test.run_test()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")


if __name__ == "__main__":
    main()