# test_tasks.py
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
# –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å —É —Ñ–∞–π–ª—ñ tasks.py

import sys
import os
from pathlib import Path

def run_tests():
    print("="*60)
    print("–ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–í–î–ê–ù–¨")
    print("="*60)
    
    filedir = Path(__file__).parent
    filepath = filedir / "_selflearning01.py"
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
    if not filepath.exists():
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –§–∞–π–ª 'tasks.py' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∑–±–µ—Ä–µ–≥–ª–∏ —Ñ–∞–π–ª –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ —è–∫ 'tasks.py'")
        return
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ —Ñ–∞–π–ª—É –∑–∞–≤–¥–∞–Ω—å
        sys.path.insert(0, '.')
        import _selflearning01 as tasks
        
        tests_passed = 0
        total_tests = 0
        
        print("–ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...\n")
        
        # –¢–ï–°–¢ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
        print("üìã –¢–ï–°–¢ 1: –û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ")
        total_tests += 4
        
        if hasattr(tasks, 'student_name') and isinstance(tasks.student_name, str) and len(tasks.student_name) > 0:
            print("  ‚úÖ student_name: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø —ñ –Ω–µ –ø—É—Å—Ç–∏–π")
            tests_passed += 1
        else:
            print("  ‚ùå student_name: –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–µ–ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º")
        
        if hasattr(tasks, 'student_age') and isinstance(tasks.student_age, int) and tasks.student_age > 0:
            print("  ‚úÖ student_age: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø —ñ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ")
            tests_passed += 1
        else:
            print("  ‚ùå student_age: –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")
        
        if hasattr(tasks, 'is_enrolled') and isinstance(tasks.is_enrolled, bool):
            print("  ‚úÖ is_enrolled: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø")
            tests_passed += 1
        else:
            print("  ‚ùå is_enrolled: –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—É–ª–µ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º (True/False)")
        
        if hasattr(tasks, 'gpa_score') and isinstance(tasks.gpa_score, (int, float)) and tasks.gpa_score >= 0:
            print("  ‚úÖ gpa_score: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø —ñ –Ω–µ–≤—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ")
            tests_passed += 1
        else:
            print("  ‚ùå gpa_score: –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º >= 0")
        
        # –¢–ï–°–¢ 2: –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (25 —Ç–∞ 4)
        print("\nüî¢ –¢–ï–°–¢ 2: –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó")
        total_tests += 7
        
        expected_results = {
            'addition_result': 29,      # 25 + 4
            'subtraction_result': 21,   # 25 - 4
            'multiplication_result': 100,  # 25 * 4
            'division_result': 6.25,    # 25 / 4
            'floor_division_result': 6, # 25 // 4
            'modulo_result': 1,         # 25 % 4
            'power_result': 390625      # 25 ** 4
        }
        
        for var_name, expected in expected_results.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if abs(actual - expected) < 0.001:
                    print(f"  ‚úÖ {var_name}: {actual} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ {actual}")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 3: –†–æ–±–æ—Ç–∞ –∑ —Ä—è–¥–∫–∞–º–∏
        print("\nüìù –¢–ï–°–¢ 3: –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫–∞ 'Python Programming Language'")
        total_tests += 5
        
        string_tests = {
            'first_char': 'P',
            'last_char': 'e', 
            'text_length': 27,
            'first_word': 'Python',
            'last_word': 'Language'
        }
        
        for var_name, expected in string_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if actual == expected:
                    print(f"  ‚úÖ {var_name}: '{actual}' (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å '{expected}', –æ—Ç—Ä–∏–º–∞–Ω–æ '{actual}'")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 4: –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
        print("\nüé® –¢–ï–°–¢ 4: –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤")
        total_tests += 3
        
        format_tests = [
            ('greeting', ['–ú–∞—Ä—ñ—è', '–∑–≤–∞—Ç–∏']),
            ('age_info', ['22', '—Ä–æ–∫–∏']),
            ('height_info', ['1.65', '–∑—Ä—ñ—Å—Ç'])
        ]
        
        for var_name, required_words in format_tests:
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if all(word in str(actual) for word in required_words):
                    print(f"  ‚úÖ {var_name}: –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–ª–æ–≤–∞")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–ª–æ–≤–∞ {required_words}")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 5: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤
        print("\nüîÑ –¢–ï–°–¢ 5: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤")
        total_tests += 3
        
        conversion_tests = {
            'converted_int': (123, int),
            'converted_float': (45.67, float),
            'converted_str': ('89', str)
        }
        
        for var_name, (expected_value, expected_type) in conversion_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if isinstance(actual, expected_type) and (abs(actual - expected_value) < 0.001 if isinstance(expected_value, (int, float)) else actual == expected_value):
                    print(f"  ‚úÖ {var_name}: {actual} ({expected_type.__name__}) - –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected_value} ({expected_type.__name__}), –æ—Ç—Ä–∏–º–∞–Ω–æ {actual} ({type(actual).__name__})")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 6: –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
        print("\nüìê –¢–ï–°–¢ 6: –ü–ª–æ—â–∞ —Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞")
        total_tests += 2
        
        math_tests = {
            'rectangle_area': 103.75,      # 12.5 * 8.3
            'rectangle_perimeter': 41.6    # 2 * (12.5 + 8.3)
        }
        
        for var_name, expected in math_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if abs(actual - expected) < 0.001:
                    print(f"  ‚úÖ {var_name}: {actual} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ {actual}")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 7: –†–æ–±–æ—Ç–∞ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ —Ä—è–¥–∫–∞ "Programming"
        print("\nüîç –¢–ï–°–¢ 7: –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è —Ä—è–¥–∫–∞ 'Programming'")
        total_tests += 4
        
        index_tests = {
            'char_at_0': 'P',      # Programming[0]
            'char_at_5': 'a',      # Programming[5]
            'char_at_minus_1': 'g', # Programming[-1]
            'char_at_minus_3': 'i'  # Programming[-3]
        }
        
        for var_name, expected in index_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if actual == expected:
                    print(f"  ‚úÖ {var_name}: '{actual}' (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å '{expected}', –æ—Ç—Ä–∏–ºano '{actual}'")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 8: –ó—Ä—ñ–∑–∏ —Ä—è–¥–∫–∞ "Hello World Python"
        print("\n‚úÇÔ∏è –¢–ï–°–¢ 8: –ó—Ä—ñ–∑–∏ —Ä—è–¥–∫–∞ 'Hello World Python'")
        total_tests += 4
        
        slice_tests = {
            'first_five': 'Hello',         # [0:5]
            'middle_part': 'World',        # [6:11]
            'last_six': 'Python',          # [-6:]
            'every_second': 'HloWrdPto'    # [::2]
        }
        
        for var_name, expected in slice_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if actual == expected:
                    print(f"  ‚úÖ {var_name}: '{actual}' (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å '{expected}', –æ—Ç—Ä–∏–º–∞–Ω–æ '{actual}'")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 9: –õ–æ–≥—ñ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        print("\nüîó –¢–ï–°–¢ 9: –õ–æ–≥—ñ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (a=True, b=False, c=True)")
        total_tests += 4
        
        logic_tests = {
            'and_result': False,    # True and False
            'or_result': True,      # True or False
            'not_result': False,    # not True
            'complex_result': True  # (True and True) or (not False)
        }
        
        for var_name, expected in logic_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if actual == expected:
                    print(f"  ‚úÖ {var_name}: {actual} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ {actual}")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–ï–°–¢ 10: –°–∫–ª–∞–¥–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        print("\nüßÆ –¢–ï–°–¢ 10: –°–∫–ª–∞–¥–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è (x=10, y=3, z=2)")
        total_tests += 4
        
        complex_tests = {
            'result1': 26,              # (10 + 3) * 2
            'result2': 998,             # 10 ** 3 - 2
            'result3': 7.333333333333333, # (10 / 3) + (2 * 2)
            'result4': 5                # 10 % 3 + 2 ** 2
        }
        
        for var_name, expected in complex_tests.items():
            if hasattr(tasks, var_name):
                actual = getattr(tasks, var_name)
                if abs(actual - expected) < 0.001:
                    print(f"  ‚úÖ {var_name}: {actual} (–ø—Ä–∞–≤—ñ–ª—å–Ω–æ)")
                    tests_passed += 1
                else:
                    print(f"  ‚ùå {var_name}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ {actual}")
            else:
                print(f"  ‚ùå {var_name}: –∑–º—ñ–Ω–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø
        print("\n" + "="*60)
        print("üéØ –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        print("="*60)
        
        percentage = (tests_passed / total_tests) * 100
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: {tests_passed}/{total_tests}")
        print(f"–í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {percentage:.1f}%")
        
        if percentage == 100:
            print("\nüèÜ –í–Ü–î–ú–Ü–ù–ù–û! –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            print("   –í–∏ —á—É–¥–æ–≤–æ –∑–∞—Å–≤–æ—ó–ª–∏ –æ—Å–Ω–æ–≤–∏ Python!")
        elif percentage >= 90:
            print("\nüéâ –ß–£–î–û–í–û! –ú–∞–π–∂–µ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω—ñ!")
            print("   –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫—ñ–ª—å–∫–∞ –¥–µ—Ç–∞–ª–µ–π —ñ –±—É–¥–µ—Ç–µ —ñ–¥–µ–∞–ª—å–Ω—ñ!")
        elif percentage >= 75:
            print("\nüëç –î–û–ë–†–ï! –û—Å–Ω–æ–≤–∏ –∑–∞—Å–≤–æ—î–Ω—ñ, –∞–ª–µ —î –Ω–∞–¥ —á–∏–º –ø–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
            print("   –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        elif percentage >= 50:
            print("\nüìö –ó–ê–î–û–í–Ü–õ–¨–ù–û. –†–µ–∫–æ–º–µ–Ω–¥—É—é:")
            print("   - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª –ª–µ–∫—Ü—ñ—ó")
            print("   - –ó–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É –Ω–∞ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ")
            print("   - –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ç–∞ –ø–µ—Ä–µ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏")
        else:
            print("\n‚ö†Ô∏è –ü–û–¢–†–Ü–ë–ù–û –ë–Ü–õ–¨–®–ï –ü–†–ê–ö–¢–ò–ö–ò:")
            print("   - –£–≤–∞–∂–Ω–æ –≤–∏–≤—á—ñ—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª –ª–µ–∫—Ü—ñ—ó")
            print("   - –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é")
            print("   - –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –±–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ Python")
        
        print("\nüí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:")
        if percentage < 100:
            print("   - –£–≤–∞–∂–Ω–æ —á–∏—Ç–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –∑–∞–≤–¥–∞–Ω—å")
            print("   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö (int, float, str, bool)")
            print("   - –ó–≤–µ—Ä—Ç–∞–π—Ç–µ —É–≤–∞–≥—É –Ω–∞ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)")
            print("   - –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ —Ç–∞ –ª–æ–≥—ñ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó")
        
        print("\n" + "="*60)
        
    except ImportError as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –Ü–ú–ü–û–†–¢–£: {e}")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª 'tasks.py' –Ω–µ –º–∞—î —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫")
    except Exception as e:
        print(f"‚ùå –ù–ï–û–ß–Ü–ö–£–í–ê–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        print("–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é")

if __name__ == "__main__":
    run_tests()